#pragma once
#include "core/BehaviorTree/ConditionNode.h"

/**
 * @class IsFacingTargetCondition
 * @brief Узел-условие для проверки, смотрит ли персонаж на свою цель с "человеческой" точностью.
 *
 * @section how_it_works Как это работает (Математика без математики)
 * Этот узел полностью избегает проблемной математики с углами (например, "переход через ноль" с 6.28 на 0.00).
 * Вместо этого он использует стандартный для игровой индустрии метод скалярного произведения векторов.
 *
 * 1.  **Создаются две "стрелки" (вектора):**
 *     - `Вектор Взгляда`: Куда персонаж смотрит прямо сейчас (вычисляется из `orientation`).
 *     - `Вектор на Цель`: Направление от персонажа точно на цель.
 *
 * 2.  **Вычисляется "Оценка Похожести":** С помощью скалярного произведения мы получаем одно число от -1.0 до 1.0,
 *     которое показывает, насколько эти две "стрелки" совпадают.
 *     - `1.0`: Идеальное совпадение (смотрим точно в цель).
 *     - `0.0`: "Стрелки" перпендикулярны (цель ровно сбоку).
 *     - `-1.0`: "Стрелки" смотрят в противоположные стороны (цель за спиной).
 *
 * 3.  **Сравнение с Порогом:** Мы сравниваем эту "оценку" с заданной константой (порогом точности). Если
 *     оценка выше порога, узел возвращает Success.
 *
 * @section game_limits Пределы, допустимые игрой
 * Наши эксперименты показали, что сама игра позволяет использовать заклинания, если "оценка похожести"
 * больше `~0.0`. Это соответствует огромному конусу обзора в **±90 градусов**. Использование такого
 * низкого порога привело бы к неестественному поведению, когда бот атакует, стоя почти боком к цели.
 *
 * @section humanizer_choice Наш выбор для "Гуманизации"
 * Мы выбрали порог `0.707f`. Это значение соответствует углу примерно в **±45 градусов** от
 * идеального направления на цель. Этот выбор является компромиссом между эффективностью и
 * естественным поведением:
 * - Он достаточно широк, чтобы бот не "дергался" для коррекции прицела на каждый пиксель движения цели.
 * - Он достаточно узок, чтобы бот всегда явно поворачивался лицом к цели перед атакой, как это делал бы человек.
 *
 * @section tuning Как настроить "остроту" прицеливания
 * Чтобы изменить точность, с которой бот должен смотреть на цель, достаточно изменить ОДНУ константу
 * в файле `IsFacingTargetCondition.cpp`: `HUMANIZER_ACCURACY_THRESHOLD`.
 *
 * Шпаргалка "Оценка -> Угол":
 * - **`0.985f`**: для "снайперского" поведения (допуск ±10°).
 * - **`0.940f`**: для более точного поведения (допуск ±20°).
 * - **`0.707f`**: наш текущий выбор (допуск ±45°).
 * - **`0.5f`**: для "расслабленного" поведения (допуск ±60°).
 */
class IsFacingTargetCondition : public ConditionNode
{
   public:
    // Конструктор может быть пустым, вся информация будет в контексте.
    IsFacingTargetCondition();
    NodeStatus tick(BTContext& context) override;
};