#pragma once

#include <vector>
#include <string>
#include <cstdint>  // Для использования типов с фиксированным размером, таких как uint32_t
#include <QLoggingCategory>

// Объявляем категорию логирования для нашего парсера
Q_DECLARE_LOGGING_CATEGORY(logDBCParser)

/**
 * @struct MapRecord
 * @brief Хранит информацию об одной карте (записи из Map.dbc).
 *
 * Эта структура содержит только те поля из Map.dbc, которые необходимы
 * для работы NavMeshTool: ID карты, ее системное имя для построения путей
 * и отображаемое имя для пользовательского интерфейса.
 */
struct MapRecord
{
    /** @brief Уникальный идентификатор карты. */
    uint32_t id;

    /** @brief Внутреннее имя карты, используемое для путей к файлам (например, "Azeroth", "BlackTemple"). */
    std::string internalName;

    /** @brief Отображаемое имя карты, локализованное (например, "Азерот", "Черный храм"). */
    std::string displayName;
};

/**
 * @class DBCParser
 * @brief Парсер для файлов формата .dbc (DataBaseClient).
 *
 * Этот класс предоставляет функциональность для чтения и разбора
 * клиентских баз данных World of Warcraft. Он спроектирован как
 * универсальный инструмент, но в данный момент сфокусирован на работе
 * с Map.dbc для извлечения информации о картах.
 */
class DBCParser
{
   public:
    /**
     * @brief Парсит данные из .dbc файла.
     * @param data Вектор байт, представляющий полное содержимое .dbc файла.
     * @return Вектор структур MapRecord, каждая из которых представляет одну карту.
     *         В случае ошибки парсинга (например, некорректный формат файла),
     *         метод вернет пустой вектор и зарегистрирует критическую ошибку.
     */
    std::vector<MapRecord> parse(const std::vector<char>& data) const;
};
