.text:008260C0 sub_8260C0      proc near               ; CODE XREF: CCollisionObject__PerformQuery+75↓p
.text:008260C0                                         ; sub_831FC0+121↓p ...
.text:008260C0
.text:008260C0 var_8           = dword ptr -8
.text:008260C0 var_4           = dword ptr -4
.text:008260C0 arg_0           = dword ptr  8
.text:008260C0 arg_4           = dword ptr  0Ch
.text:008260C0 arg_8           = dword ptr  10h
.text:008260C0
.text:008260C0                 push    ebp
.text:008260C1                 mov     ebp, esp
.text:008260C3                 sub     esp, 8
.text:008260C6                 push    ebx
.text:008260C7                 push    esi
.text:008260C8                 push    edi
.text:008260C9                 mov     edi, [ebp+arg_0]
.text:008260CC                 mov     esi, [edi+24h]
.text:008260CF                 test    esi, esi
.text:008260D1                 jnz     short loc_8260FA
.text:008260D3                 mov     edx, [edi+1Ch]
.text:008260D6                 xor     eax, eax
.text:008260D8                 test    edx, edx
.text:008260DA                 jbe     short loc_8260F3
.text:008260DC                 mov     ecx, [edi+20h]
.text:008260DF                 mov     esi, [ebp+arg_4]
.text:008260E2
.text:008260E2 loc_8260E2:                             ; CODE XREF: sub_8260C0+31↓j
.text:008260E2                 movzx   ebx, word ptr [ecx]
.text:008260E5                 cmp     ebx, esi
.text:008260E7                 jz      short loc_826162
.text:008260E9                 add     eax, 1
.text:008260EC                 add     ecx, 40h ; '@'
.text:008260EF                 cmp     eax, edx
.text:008260F1                 jb      short loc_8260E2
.text:008260F3
.text:008260F3 loc_8260F3:                             ; CODE XREF: sub_8260C0+1A↑j
.text:008260F3                 mov     eax, 0FFFFh
.text:008260F8                 jmp     short loc_826165
.text:008260FA ; ---------------------------------------------------------------------------
.text:008260FA
.text:008260FA loc_8260FA:                             ; CODE XREF: sub_8260C0+11↑j
.text:008260FA                 mov     eax, [ebp+arg_4]
.text:008260FD                 xor     edx, edx
.text:008260FF                 div     esi
.text:00826101                 mov     eax, [edi+28h]
.text:00826104                 mov     [ebp+var_4], eax
.text:00826107                 movzx   eax, word ptr [eax+edx*2]
.text:0082610B                 cmp     ax, 0FFFFh
.text:0082610F                 jnz     short loc_826118
.text:00826111                 mov     eax, 0FFFFh
.text:00826116                 jmp     short loc_826165
.text:00826118 ; ---------------------------------------------------------------------------
.text:00826118
.text:00826118 loc_826118:                             ; CODE XREF: sub_8260C0+4F↑j
.text:00826118                 mov     edi, [edi+20h]
.text:0082611B                 movzx   ebx, ax
.text:0082611E                 shl     ebx, 6
.text:00826121                 mov     [ebp+var_8], edi
.text:00826124                 movzx   edi, word ptr [ebx+edi]
.text:00826128                 cmp     edi, [ebp+arg_4]
.text:0082612B                 mov     ecx, 1
.text:00826130                 jz      short loc_82615F
.text:00826132
.text:00826132 loc_826132:                             ; CODE XREF: sub_8260C0+9D↓j
.text:00826132                 mov     eax, ecx
.text:00826134                 imul    eax, ecx
.text:00826137                 add     eax, edx
.text:00826139                 xor     edx, edx
.text:0082613B                 div     esi
.text:0082613D                 mov     eax, [ebp+var_4]
.text:00826140                 movzx   eax, word ptr [eax+edx*2]
.text:00826144                 cmp     ax, 0FFFFh
.text:00826148                 jz      short loc_8261A3
.text:0082614A                 mov     ebx, [ebp+var_8]
.text:0082614D                 movzx   edi, ax
.text:00826150                 shl     edi, 6
.text:00826153                 movzx   edi, word ptr [edi+ebx]
.text:00826157                 add     ecx, 1
.text:0082615A                 cmp     edi, [ebp+arg_4]
.text:0082615D                 jnz     short loc_826132
.text:0082615F
.text:0082615F loc_82615F:                             ; CODE XREF: sub_8260C0+70↑j
.text:0082615F                 mov     edi, [ebp+arg_0]
.text:00826162
.text:00826162 loc_826162:                             ; CODE XREF: sub_8260C0+27↑j
.text:00826162                 movzx   eax, ax
.text:00826165
.text:00826165 loc_826165:                             ; CODE XREF: sub_8260C0+38↑j
.text:00826165                                         ; sub_8260C0+56↑j ...
.text:00826165                 mov     edx, [edi+1Ch]
.text:00826168                 movzx   ecx, ax
.text:0082616B                 cmp     ecx, edx
.text:0082616D                 jnb     short loc_826196
.text:0082616F                 mov     esi, [ebp+arg_8]
.text:00826172
.text:00826172 loc_826172:                             ; CODE XREF: sub_8260C0+C9↓j
.text:00826172                 test    esi, esi
.text:00826174                 jbe     short loc_82618B
.text:00826176                 mov     eax, [edi+20h]
.text:00826179                 shl     ecx, 6
.text:0082617C                 movzx   eax, word ptr [ecx+eax+3Ch]
.text:00826181                 movzx   ecx, ax
.text:00826184                 sub     esi, 1
.text:00826187                 cmp     ecx, edx
.text:00826189                 jb      short loc_826172
.text:0082618B
.text:0082618B loc_82618B:                             ; CODE XREF: sub_8260C0+B4↑j
.text:0082618B                 movzx   ecx, ax
.text:0082618E                 cmp     ecx, edx
.text:00826190                 jnb     short loc_826196
.text:00826192                 test    esi, esi
.text:00826194                 jbe     short loc_82619A
.text:00826196
.text:00826196 loc_826196:                             ; CODE XREF: sub_8260C0+AD↑j
.text:00826196                                         ; sub_8260C0+D0↑j
.text:00826196                 or      ax, 0FFFFh
.text:0082619A
.text:0082619A loc_82619A:                             ; CODE XREF: sub_8260C0+D4↑j
.text:0082619A                 pop     edi
.text:0082619B                 pop     esi
.text:0082619C                 pop     ebx
.text:0082619D                 mov     esp, ebp
.text:0082619F                 pop     ebp
.text:008261A0                 retn    0Ch
.text:008261A3 ; ---------------------------------------------------------------------------
.text:008261A3
.text:008261A3 loc_8261A3:                             ; CODE XREF: sub_8260C0+88↑j
.text:008261A3                 mov     edi, [ebp+arg_0]
.text:008261A6                 mov     eax, 0FFFFh
.text:008261AB                 jmp     short loc_826165
.text:008261AB sub_8260C0      endp
.text:008261AB
.text:008261AB ; ---------------------------------------------------------------------------
.text:008261AD                 align 10h

__int16 __stdcall sub_8260C0(_DWORD *a1, unsigned int a2, int a3)
{
  _DWORD *v3; // edi
  unsigned int v4; // esi
  unsigned int v5; // edx
  unsigned int v6; // eax
  unsigned __int16 *v7; // ecx
  unsigned int v8; // edx
  int v9; // ecx
  unsigned int v10; // edx
  int v11; // ecx
  int v14; // [esp+Ch] [ebp-8h]
  int v15; // [esp+10h] [ebp-4h]

  v3 = a1;
  v4 = a1[9];
  if ( v4 )
  {
    v8 = a2 % v4;
    v15 = a1[10];
    LOWORD(v6) = *(_WORD *)(v15 + 2 * (a2 % v4));
    if ( (_WORD)v6 == 0xFFFF )
    {
      LOWORD(v6) = -1;
    }
    else
    {
      v14 = a1[8];
      v9 = 1;
      if ( *(unsigned __int16 *)(((unsigned __int16)v6 << 6) + v14) == a2 )
      {
LABEL_12:
        v3 = a1;
      }
      else
      {
        while ( 1 )
        {
          v8 = (v8 + v9 * v9) % v4;
          LOWORD(v6) = *(_WORD *)(v15 + 2 * v8);
          if ( (_WORD)v6 == 0xFFFF )
            break;
          ++v9;
          if ( *(unsigned __int16 *)(((unsigned __int16)v6 << 6) + v14) == a2 )
            goto LABEL_12;
        }
        v3 = a1;
        LOWORD(v6) = -1;
      }
    }
  }
  else
  {
    v5 = a1[7];
    v6 = 0;
    if ( v5 )
    {
      v7 = (unsigned __int16 *)a1[8];
      while ( *v7 != a2 )
      {
        ++v6;
        v7 += 32;
        if ( v6 >= v5 )
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      LOWORD(v6) = -1;
    }
  }
  v10 = v3[7];
  v11 = (unsigned __int16)v6;
  if ( (unsigned __int16)v6 >= v10 )
    goto LABEL_18;
  do
  {
    if ( !a3 )
      break;
    LOWORD(v6) = *(_WORD *)((v11 << 6) + v3[8] + 60);
    v11 = (unsigned __int16)v6;
    --a3;
  }
  while ( (unsigned __int16)v6 < v10 );
  if ( (unsigned __int16)v6 >= v10 || a3 )
LABEL_18:
    LOWORD(v6) = -1;
  return v6;
}