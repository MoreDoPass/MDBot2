#include <StormLib.h>
#include <iostream>
#include <windows.h>  // Для GetLastError
#include <string>     // для std::to_string

// Убираем redirect_io_to_console для максимального упрощения
/*
#ifdef _MSC_VER
#include <cstdio>
void redirect_io_to_console()
{
    // Перенаправляем stdout, stderr, stdin на новую консоль
    if (AllocConsole())
    {
        FILE* pCout;
        FILE* pCerr;
        FILE* pCin;
        freopen_s(&pCout, "CONOUT$", "w", stdout);
        freopen_s(&pCerr, "CONOUT$", "w", stderr);
        freopen_s(&pCin, "CONIN$", "r", stdin);
        std::cout.clear();
        std::cerr.clear();
        std::cin.clear();
    }
}
#endif
*/

int main(int argc, char* argv[])
{
    // #ifdef _MSC_VER
    // redirect_io_to_console();
    // #endif

    // Путь к архиву, предоставленный пользователем
    // Используем const char* и SFileOpenArchiveA
    const char* mpqPath = "C:\\Games\\WoW Sirus\\World of Warcraft Sirus\\Data\\common.mpq";
    HANDLE hMpq = NULL;
    bool bOpened = false;  // Инициализируем как false

    std::cout << "Test started." << std::endl;
    std::cout << "MPQ Path: " << mpqPath << std::endl;
    std::cout << "Calling SFileOpenArchive..." << std::endl;

    SetLastError(0);                      // Сбрасываем последнюю ошибку перед вызовом
    DWORD preCallError = GetLastError();  // Запоминаем ошибку до (должна быть 0)

    // Возвращаемся к простому SFileOpenArchive с char*
    // bOpened = SFileOpenArchiveExA(mpqPath, 0 /*priority*/, MPQ_OPEN_READ_ONLY, &hMpq, 0 /*dwStreamFlags - пробуем
    // 0*/);
    bOpened = SFileOpenArchive(mpqPath, 0, 0, &hMpq);

    DWORD postCallError = GetLastError();  // Получаем ошибку СРАЗУ после вызова

    std::cout << "SFileOpenArchive call finished." << std::endl;
    std::cout << "bOpened result: " << (bOpened ? "true" : "false") << std::endl;
    std::cout << "hMpq handle: " << hMpq << std::endl;
    std::cout << "GetLastError() before call (should be 0 if reset): " << preCallError << std::endl;
    std::cout << "GetLastError() immediately after SFileOpenArchive: " << postCallError << std::endl;

    if (bOpened)
    {
        std::cout << "[SUCCESS] Archive appears to be opened based on return value." << std::endl;
        std::cout << "Attempting to close archive..." << std::endl;
        if (SFileCloseArchive(hMpq))
        {
            std::cout << "SFileCloseArchive successful." << std::endl;
        }
        else
        {
            std::cerr << "SFileCloseArchive FAILED. Error: " << GetLastError() << std::endl;
        }
    }
    else
    {
        std::cerr << "[FAILURE] Archive not opened based on return value." << std::endl;
        // Ошибка postCallError уже должна содержать код ошибки от StormLib/Windows
        // Если postCallError == 0, но bOpened == false, это странно и может указывать на проблему в StormLib
        if (postCallError != 0)
        {
            LPVOID lpMsgBuf;
            FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
                           NULL, postCallError, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPSTR)&lpMsgBuf, 0, NULL);
            if (lpMsgBuf)
            {
                std::cerr << "Windows System Error Message for error " << postCallError << ": " << (LPCSTR)lpMsgBuf
                          << std::endl;
                LocalFree(lpMsgBuf);
            }
            else
            {
                std::cerr << "Could not retrieve Windows system error message for error " << postCallError << std::endl;
            }
        }
        else if (!bOpened && postCallError == 0)
        {
            std::cerr << "SFileOpenArchive returned false, but GetLastError() is 0. This is unusual." << std::endl;
        }
    }

    std::cout << "Test finished. Press Enter to exit." << std::endl;
    std::cin.get();

    return bOpened ? 0 : 1;
}